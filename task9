#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

typedef struct {
    int pid;
    int arrival;
    int burst;
    int remaining;
    int waiting;
    int turnaround;
} Process;

void fcfs(Process processes[], int n) {
    int current_time = 0;
    for (int i = 0; i < n; i++) {
        if (current_time < processes[i].arrival) {
            current_time = processes[i].arrival;
        }
        processes[i].waiting = current_time - processes[i].arrival;
        current_time += processes[i].burst;
        processes[i].turnaround = processes[i].waiting + processes[i].burst;
    }
}

void sjf(Process processes[], int n) {
    int current_time = 0;
    int completed = 0;
    int shortest;

    while (completed != n) {
        shortest = -1;
        int min_burst = INT_MAX;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival <= current_time && processes[i].remaining > 0 && processes[i].burst < min_burst) {
                min_burst = processes[i].burst;
                shortest = i;
            }
        }

        if (shortest == -1) {
            current_time++;
        } else {
            processes[shortest].waiting = current_time - processes[shortest].arrival;
            current_time += processes[shortest].burst;
            processes[shortest].turnaround = processes[shortest].waiting + processes[shortest].burst;
            processes[shortest].remaining = 0;
            completed++;
        }
    }
}

void round_robin(Process processes[], int n, int quantum) {
    int current_time = 0;
    int completed = 0;
    int *remaining = (int *)malloc(n * sizeof(int));

    for (int i = 0; i < n; i++) {
        remaining[i] = processes[i].burst;
    }

    while (completed != n) {
        for (int i = 0; i < n; i++) {
            if (remaining[i] > 0 && processes[i].arrival <= current_time) {
                if (remaining[i] > quantum) {
                    current_time += quantum;
                    remaining[i] -= quantum;
                } else {
                    current_time += remaining[i];
                    processes[i].waiting = current_time - processes[i].arrival - processes[i].burst;
                    processes[i].turnaround = processes[i].waiting + processes[i].burst;
                    remaining[i] = 0;
                    completed++;
                }
            }
        }
    }

    free(remaining);
}

float calculate_avg_waiting_time(Process processes[], int n) {
    float total_waiting = 0;
    for (int i = 0; i < n; i++) {
        total_waiting += processes[i].waiting;
    }
    return total_waiting / n;
}

void print_processes(Process processes[], int n) {
    printf("PID\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", processes[i].pid, processes[i].arrival, processes[i].burst, processes[i].waiting, processes[i].turnaround);
    }
}

int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process *processes = (Process *)malloc(n * sizeof(Process));

    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival, &processes[i].burst);
        processes[i].remaining = processes[i].burst;
    }

    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &quantum);

    fcfs(processes, n);
    printf("\nFCFS Scheduling:\n");
    print_processes(processes, n);
    printf("Average Waiting Time: %.2f\n", calculate_avg_waiting_time(processes, n));

    for (int i = 0; i < n; i++) {
        processes[i].waiting = 0;
        processes[i].turnaround = 0;
        processes[i].remaining = processes[i].burst;
    }

    sjf(processes, n);
    printf("\nSJF Scheduling:\n");
    print_processes(processes, n);
    printf("Average Waiting Time: %.2f\n", calculate_avg_waiting_time(processes, n));

    for (int i = 0; i < n; i++) {
        processes[i].waiting = 0;
        processes[i].turnaround = 0;
        processes[i].remaining = processes[i].burst;
    }

    round_robin(processes, n, quantum);
    printf("\nRound Robin Scheduling:\n");
    print_processes(processes, n);
    printf("Average Waiting Time: %.2f\n", calculate_avg_waiting_time(processes, n));

    free(processes);
    return 0;
}
